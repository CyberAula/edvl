{
  "paragraphs": [
    {
      "text": "%angular\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n<script type=\"text/javascript\">\n \n    var ctx = document.getElementById('myChart').getContext('2d');\n    var chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [],\n            datasets: [{\n                label: 'Room Temperature',\n                backgroundColor: 'rgba(255, 99, 132, .5)',\n                borderColor: 'rgb(255, 99, 132)',\n                data: []\n            }]\n        },\n        options: {}\n    });\n  \n    var element = $('#someId');\n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n    scope.data = []\n    window.watcher = scope.$watch('newTemp', (newVal, oldVal) => {\n        scope.data.push(newVal)\n        chart.data.labels.push(new Date().getTime());\n        chart.data.datasets.forEach((dataset) => {\n            dataset.data.push(newVal);\n        });\n        chart.update();\n    });\n</script>\n<div id=\"someId\" style=\"display:none;\">\n    <span ng-repeat=\"ditem in data track by $index\">{{ditem}}-</span>\n</div>\n<canvas id=\"myChart\" style=\"width: 500px; height: 200px;\"></canvas>",
      "user": "anonymous",
      "dateUpdated": "2021-02-04T11:47:56+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n<script type=\"text/javascript\">\n \n    var ctx = document.getElementById('myChart').getContext('2d');\n    var chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [],\n            datasets: [{\n                label: 'Room Temperature',\n                backgroundColor: 'rgba(255, 99, 132, .5)',\n                borderColor: 'rgb(255, 99, 132)',\n                data: []\n            }]\n        },\n        options: {}\n    });\n  \n    var element = $('#someId');\n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n    scope.data = []\n    window.watcher = scope.$watch('newTemp', (newVal, oldVal) => {\n        scope.data.push(newVal)\n        chart.data.labels.push(new Date().getTime());\n        chart.data.datasets.forEach((dataset) => {\n            dataset.data.push(newVal);\n        });\n        chart.update();\n    });\n</script>\n<div id=\"someId\" style=\"display:none;\">\n    <span ng-repeat=\"ditem in data track by $index\">{{ditem}}-</span>\n</div>\n<canvas id=\"myChart\" style=\"width: 500px; height: 200px;\"></canvas>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1612439158453_327626020",
      "id": "paragraph_1610744157678_494920324",
      "dateCreated": "2021-02-04T11:45:58+0000",
      "dateStarted": "2021-02-04T11:47:56+0000",
      "dateFinished": "2021-02-04T11:47:56+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:1140"
    },
    {
      "text": "import org.apache.spark._\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.fiware.cosmos.orion.spark.connector._\nimport org.apache.spark.sql.{DataFrame, SparkSession}\n\nval ssc = new StreamingContext(sc, Seconds(1))\nval eventStream = ssc.receiverStream(new OrionReceiver(List(\"Room1\")))\n\n\neventStream.foreachRDD(blockRDD => {\n    val entities = blockRDD.flatMap(_.entities)\n    val entitiesMap = entities.map(entity => {\n        val temp: Float = entity.attrs(\"temperature\").value.asInstanceOf[Number].floatValue()\n        temp\n    })\n    val items = entitiesMap.collect\n    items.foreach(item => {\n        println(item)\n         z.angularBind(\"newTemp\", item) \n         \n    })\n   \n})\n\nssc.start()\nssc.awaitTerminationOrTimeout((5*1000).toLong)\nssc.stop(false)",
      "user": "anonymous",
      "dateUpdated": "2021-02-04T11:48:00+0000",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "49.0\n23.0\n32.0\n21.0\n30.0\n34.0\n34.0\n31.0\n27.0\nimport org.apache.spark._\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.fiware.cosmos.orion.spark.connector._\nimport org.apache.spark.sql.{DataFrame, SparkSession}\n\u001b[1m\u001b[34mssc\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.streaming.StreamingContext\u001b[0m = org.apache.spark.streaming.StreamingContext@66146a89\n\u001b[1m\u001b[34meventStream\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.streaming.dstream.ReceiverInputDStream[org.fiware.cosmos.orion.spark.connector.NgsiEvent]\u001b[0m = org.apache.spark.streaming.dstream.PluggableInputDStream@5512444b\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1612439158454_2119309100",
      "id": "paragraph_1610743504831_1238254937",
      "dateCreated": "2021-02-04T11:45:58+0000",
      "dateStarted": "2021-02-04T11:48:00+0000",
      "dateFinished": "2021-02-04T11:48:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1141"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2021-02-04T11:45:58+0000",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1612439158454_488865691",
      "id": "paragraph_1612001198678_509458564",
      "dateCreated": "2021-02-04T11:45:58+0000",
      "status": "READY",
      "$$hashKey": "object:1142"
    }
  ],
  "name": "ExampleStreamingGraph",
  "id": "2FY8N2P3U",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "spark-shared_process": [
      {
        "name": "newTemp",
        "object": 27,
        "noteId": "2FY8N2P3U"
      }
    ]
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/ExampleStreamingGraph"
}